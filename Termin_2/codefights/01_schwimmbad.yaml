---
task_name: schwimmbad

description: Die Vermehrung von Coli-Bakterien in einem Schwimmbad lasse sich mit dem Ansatz des exponentiellen Wachstums beschreiben.
Dafür haben wir folgende Funktion verwendet:


    exp_Wachstum = function (n0, r, nt)
    {  
       n = rep(NA,nt) #Vektor für zeitlichen Verlauf der Population anlegen
      n[1] = n0
      
      for (t in 2:nt)
        n[t] = n[t-1] + r * n[t-1]
      
      return(n)
    }



  Ab einer Bakterienpopulation `N_grenzwert` ist das Baden nicht mehr gefahrlos möglich.
  Gib an, ab welchem Zeitschritt der Badebetrieb bei den gegebenen Parametern `n0, r, nt` und `N_grenzwert` eingestellt werden muss.
  Wird der Schwellenwert innerhalb von 1000 Tagen nicht überschritten, gib -1 zurück.

#### Beispiel
Für `n0 = 2`, `r = 0.1` entwickelt sich die Bakterienpopulations wie `[2.0, 2.2, 2.4, 2.6, ... , 82.2, 90.5,  99.5, 109.5, ...]`. Am 43. Tag wird der Grenzwert `n_grenzwert=100` überschritten. Es soll als das Ergebnis `43` erzeugt werden.
#### Input / Output
  
input1:
	name: n0	
	type: float
	description: Startpopulation der Bakterien

input2:
	name: r	
	type: float
	description: Wachstumsrate

input3:
	name: n_grenzwert
	type: float
	description: Grenzwert für Sperrung des Badegewässers

output:
	type: integer
	description: Zeitschritt, in dem der Grenzwert erstmals überschritten wird




	
test1:
	input: 
	- 2
	- 0.1
	- 100

	output: 43	
	
test2:
	input: 
	- 50
	- 0.01
	- 200
	output: 141	
	
test3:
	input: 
	- 5
	- 0.001
	- 1000
	output: -1	
	
test4:
	input: 
	- 10
	- 1.2
	- 100
	output: 4	
	
test5:
	input: 
	- 200
	- 0.1
	- 100
	output: 1	
	
	
	
solution: |
	schwimmbad = function(n0, r, n_grenzwert) {
  
  exp_Wachstum = function (n0, r, nt)
  {  
    # n0 : Startpopulation
    # r  : Wachstumsrate
    # nt : Anzahl Zeitschritte
    
    n = rep(NA,nt) #Vektor für zeitlichen Verlauf der Population anlegen
    n[1] = n0
    
    for (t in 2:nt)
      n[t] = n[t-1] + r * n[t-1]
    
    return(n)
  }
  
  n = exp_Wachstum (n0, r, 1000)
  sperrtag = which (n > n_grenzwert)[1]
  
  if (is.na(sperrtag)) sperrtag = -1
  
  return (sperrtag)
}
	